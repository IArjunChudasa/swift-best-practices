import Foundation

class UserViewModel {
    
    // MARK: - Properties
    
    private var users: [User] = []
    var onUsersUpdated: (() -> Void)?
    
    var userCount: Int {
        return users.count
    }
    
    func fetchUsers(completion: @escaping ([User]?, Error?) -> Void) {
        guard let url = URL(string: "https://example.com/api/users") else { return }
        
        URLSessionHelper.shared.get(url) { [weak self] data, response, error in
            if let error = error {
                completion(nil, error)
                return
            }
            
            guard let data = data else {
                let noDataError = NSError(domain: "", code: -1, userInfo: [NSLocalizedDescriptionKey: "No data received"])
                completion(nil, noDataError)
                return
            }
            
            do {
                let users = try JSONDecoder().decode([User].self, from: data)
                self?.users = users
                DispatchQueue.main.async {
                    self?.onUsersUpdated?()
                }
                completion(users, nil)
            } catch {
                completion(nil, error)
            }
        }
    }
    
    func getUser(at index: Int) -> User? {
        guard index >= 0 && index < users.count else { return nil }
        return users[index]
    }
}
